# -*- coding: utf-8 -*-
"""LVADSUSR138_Abhishek_Meena_Lab2_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJ40Dkhfb--bUuJAqBUdOZX3T1Q9QVcj
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix

data = pd.read_csv("/content/penguins_classification.csv")

"""exploratory data analysis"""

data.shape

data.describe()

data.info()

data.isnull().sum()

"""data pre processing"""

data = data.drop_duplicates()

imputer = SimpleImputer(strategy='mean')
data['bill_depth_mm'] = imputer.fit_transform(data[['bill_depth_mm']])

"""model splitting"""

X = data.drop(columns=['species'])
y = data['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

# Defining categorical and numerical features
categorical_features = ['island']
num_features = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'year']

categorical_transformer = OneHotEncoder(handle_unknown='ignore')
numerical_transformer = StandardScaler()

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_transformer, categorical_features),
        ('num', numerical_transformer, num_features)
    ])

"""training the model and making predictions"""

X_train_preprocessed = preprocessor.fit_transform(X_train)
X_test_preprocessed = preprocessor.transform(X_test)

rf_clf = RandomForestClassifier()
rf_clf.fit(X_train_preprocessed, y_train)

y_pred = rf_clf.predict(X_test_preprocessed)

"""model evaluation metrics"""

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
class_rep = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Classification Report:\n", class_rep)
print("Confusion Matrix:\n", conf_matrix)