# -*- coding: utf-8 -*-
"""LVADSUSR138_IA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KX2TevYElC9eHlBYDIhplNMWrvZ18gwl
"""

import numpy as np
import pandas as pd

#question1
arr = np.array([1, 2, 3, 4, 5, 6, 7])
max = np.max(arr)
min = np.min(arr)
sum = np.sum(arr)
mean = np.mean(arr)
stdev = np.std(arr)
print('Max element in array: ', max, 'Min element in array: ', min,'Sum of elements in array: ', sum,'Mean of array: ', mean,'Standard deviation of array: ', stdev)

#question2
health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])  # height, weight, age for individual 3
mean = np.mean(health_data)
std = np.std(health_data)
print('Mean : ', mean, 'Std :', std)

#question3
arr = np.array([[30, 50, 70, 80, 40], [50, 20, 80, 20, 70], [60, 40, 80, 20, 10]])

slice_ = arr[:, 2:]

print(np.mean(slice_, axis=1))

#question4
temp = np.linspace(15, 25, 24)
print(temp)

#question5
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5
print(np.mean(daily_closing_prices))

#question6
np.arange(100)

#question7
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])
det = np.linalg.det(properties_matrix)
print(det)

#question8
arr = np.array([[1,2,3], [4, 5, 6], [7, 8, 9]])
condition = arr > 5
selected = arr[condition]
print(selected)

#question9
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

df = pd.DataFrame(data)
filter_ = df[(df['Age']< 45) & (df['Department'] != 'HR')]

names_city = filter_[['Name', 'City']].values.tolist()
print(names_city)

#question10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}
df = pd.DataFrame(data)
sales = df.groupby('Department')['Sales'].sum()
count = df.groupby('Department')['Salesperson'].size()
avg_sales = sales / count
rank = avg_sales.sort_values(ascending=False).reset_index()
rank['Total count'] = count.reset_index(drop=True)
print(rank)

#question11
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}
df = pd.DataFrame(data)
fruits = df[df['Category'] == 'Fruit']
avg_fruit = fruits['Price'].mean()
promo = fruits[(fruits['Price']> avg_fruit) & (~fruits['Promotion'])]
print(promo)

#question12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}
df1 = pd.DataFrame(employee_data)
df2 = pd.DataFrame(project_data)
df3 = pd.merge(df2, df1, on='Employee', how='left')
df3['Department'] = df3['Department'].fillna('Not Assigned')
df3['Manager'] = df3['Manager'].fillna('Not Assigned')
overview = df3.groupby(['Department', 'Manager'])['Project'].apply(list).reset_index()
print(overview)

#question13
df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Q13_sports_team_stats.csv')
x = df.to_string()
wins = df['Wins']/df['GamesPlayed']
print('Win ratio:')
print(wins)
avg_score = df['Wins'].mean()
print('avg_score:' ,avg_score)

#question14
df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Q14_customer_purchases.csv')
x = df.to_string()

pur = df['PurchaseAmount'].mean()
max = df['PurchaseAmount'].max()
min = df['PurchaseAmount'].min()
print('Average purchase amount :', pur)
print('Max purchase amount :', max)
print('Min purchase amount :', min)

#question15
df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Q15_student_grades.csv')
x = df.to_string()

grad = df['Grade'].mean()
max = df['Grade'].max()
min = df['Grade'].min()
print('Average grade :', grad)
print('Max grade :', max)
print('Min grade :', min)